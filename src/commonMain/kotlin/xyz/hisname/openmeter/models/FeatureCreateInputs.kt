/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * A feature is a feature or service offered to a customer. For example: CPU-Hours, Tokens, API Calls, etc. 
 *
 * @param key The key is an immutable unique identifier of the feature used throughout the API, for example when interacting with a subject's entitlements. The key has to be unique across all active features, but archived features can share the same key. The key should consist of lowercase alphanumeric characters and dashes. 
 * @param name The name of the feature. 
 * @param metadata Additional metadata for the feature, useful for syncing with external systems and annotating custom fields. 
 * @param meterSlug The meter that the feature is associated with and and based on which usage is calculated. The meter selected must have SUM or COUNT aggregation. 
 * @param meterGroupByFilters Optional meter group by filters. Useful if the meter scope is broader than what feature tracks. Example scenario would be a meter tracking all token use with groupBy fields for the model, then the feature could filter for model=gpt-4. 
 */
@Serializable

data class FeatureCreateInputs (

    /* The key is an immutable unique identifier of the feature used throughout the API, for example when interacting with a subject's entitlements. The key has to be unique across all active features, but archived features can share the same key. The key should consist of lowercase alphanumeric characters and dashes.  */
    @SerialName(value = "key") @Required val key: kotlin.String,

    /* The name of the feature.  */
    @SerialName(value = "name") @Required val name: kotlin.String,

    /* Additional metadata for the feature, useful for syncing with external systems and annotating custom fields.  */
    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* The meter that the feature is associated with and and based on which usage is calculated. The meter selected must have SUM or COUNT aggregation.  */
    @SerialName(value = "meterSlug") val meterSlug: kotlin.String? = null,

    /* Optional meter group by filters. Useful if the meter scope is broader than what feature tracks. Example scenario would be a meter tracking all token use with groupBy fields for the model, then the feature could filter for model=gpt-4.  */
    @SerialName(value = "meterGroupByFilters") val meterGroupByFilters: kotlin.collections.Map<kotlin.String, kotlin.String>? = null

) {


}

