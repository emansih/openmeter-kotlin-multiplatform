/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param hasAccess Whether the subject has access to the feature. Shared accross all entitlement types. 
 * @param balance Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative. 
 * @param usage Only available for metered entitlements. Returns the total feature usage in the current period. 
 * @param overage Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage. 
 * @param config Only available for static entitlements. The JSON parsable config of the entitlement. 
 */
@Serializable

data class EntitlementValue (

    /* Whether the subject has access to the feature. Shared accross all entitlement types.  */
    @SerialName(value = "hasAccess") @Required val hasAccess: kotlin.Boolean,

    /* Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.  */
    @SerialName(value = "balance") val balance: kotlin.Double? = null,

    /* Only available for metered entitlements. Returns the total feature usage in the current period.  */
    @SerialName(value = "usage") val usage: kotlin.Double? = null,

    /* Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.  */
    @SerialName(value = "overage") val overage: kotlin.Double? = null,

    /* Only available for static entitlements. The JSON parsable config of the entitlement.  */
    @SerialName(value = "config") val config: kotlin.String? = null

) {


}

