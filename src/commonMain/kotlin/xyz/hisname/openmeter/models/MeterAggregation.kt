/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models


import kotlinx.serialization.*

/**
 * The aggregation type to use for the meter.
 *
 * Values: SUM,COUNT,UNIQUE_COUNT,AVG,MIN,MAX
 */
@Serializable
enum class MeterAggregation(val value: kotlin.String) {

    @SerialName(value = "SUM")
    SUM("SUM"),

    @SerialName(value = "COUNT")
    COUNT("COUNT"),

    @SerialName(value = "UNIQUE_COUNT")
    UNIQUE_COUNT("UNIQUE_COUNT"),

    @SerialName(value = "AVG")
    AVG("AVG"),

    @SerialName(value = "MIN")
    MIN("MIN"),

    @SerialName(value = "MAX")
    MAX("MAX");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is MeterAggregation) "$data" else null

        /**
         * Returns a valid [MeterAggregation] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): MeterAggregation? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

