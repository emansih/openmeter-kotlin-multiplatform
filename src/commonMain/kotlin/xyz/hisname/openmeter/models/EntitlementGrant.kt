/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import xyz.hisname.openmeter.models.ExpirationPeriod
import xyz.hisname.openmeter.models.RecurringPeriod

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param amount The amount to grant. Should be a positive number. 
 * @param effectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute). 
 * @param expiration 
 * @param id Readonly unique ULID identifier. 
 * @param createdAt The date and time the resource was created.
 * @param updatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
 * @param entitlementId The unique entitlement ULID that the grant is associated with. 
 * @param priority The priority of the grant. Grants with higher priority are applied first. Priority is a positive decimal numbers. With lower numbers indicating higher importance. For example, a priority of 1 is more urgent than a priority of 2. When there are several grants available for the same subject, the system selects the grant with the highest priority. In cases where grants share the same priority level, the grant closest to its expiration will be used first. In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first. 
 * @param maxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount)) 
 * @param minRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount)) 
 * @param metadata 
 * @param recurrence 
 * @param deletedAt The date and time the resource was deleted.
 * @param nextRecurrence The next time the grant will recurr. 
 * @param expiresAt The expiration date of the grant. 
 * @param voidedAt The date and time the grant was voided (cannot be used after that).
 */
@Serializable

data class EntitlementGrant (

    /* The amount to grant. Should be a positive number.  */
    @SerialName(value = "amount") @Required val amount: kotlin.Double,

    /* Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).  */
    @SerialName(value = "effectiveAt") @Required val effectiveAt: kotlinx.datetime.Instant,

    @SerialName(value = "expiration") @Required val expiration: ExpirationPeriod,

    /* Readonly unique ULID identifier.  */
    @SerialName(value = "id") @Required val id: kotlin.String,

    /* The date and time the resource was created. */
    @SerialName(value = "createdAt") @Required val createdAt: kotlinx.datetime.Instant,

    /* The date and time the resource was last updated. The initial value is the same as createdAt. */
    @SerialName(value = "updatedAt") @Required val updatedAt: kotlinx.datetime.Instant,

    /* The unique entitlement ULID that the grant is associated with.  */
    @SerialName(value = "entitlementId") @Required val entitlementId: kotlin.String,

    /* The priority of the grant. Grants with higher priority are applied first. Priority is a positive decimal numbers. With lower numbers indicating higher importance. For example, a priority of 1 is more urgent than a priority of 2. When there are several grants available for the same subject, the system selects the grant with the highest priority. In cases where grants share the same priority level, the grant closest to its expiration will be used first. In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.  */
    @SerialName(value = "priority") val priority: kotlin.Int? = 1,

    /* Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))  */
    @SerialName(value = "maxRolloverAmount") val maxRolloverAmount: kotlin.Double? = 0.0,

    /* Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))  */
    @SerialName(value = "minRolloverAmount") val minRolloverAmount: kotlin.Double? = 0.0,

    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    @SerialName(value = "recurrence") val recurrence: RecurringPeriod? = null,

    /* The date and time the resource was deleted. */
    @SerialName(value = "deletedAt") val deletedAt: kotlinx.datetime.Instant? = null,

    /* The next time the grant will recurr.  */
    @SerialName(value = "nextRecurrence") val nextRecurrence: kotlinx.datetime.Instant? = null,

    /* The expiration date of the grant.  */
    @SerialName(value = "expiresAt") val expiresAt: kotlinx.datetime.Instant? = null,

    /* The date and time the grant was voided (cannot be used after that). */
    @SerialName(value = "voidedAt") val voidedAt: kotlinx.datetime.Instant? = null

) {


}

