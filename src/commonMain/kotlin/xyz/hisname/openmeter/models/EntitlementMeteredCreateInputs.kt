/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import xyz.hisname.openmeter.models.RecurringPeriodCreateInput

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param usagePeriod 
 * @param type 
 * @param featureKey The feature the subject is entitled to use. Either featureKey or featureId is required. 
 * @param featureId The feature the subject is entitled to use. Either featureKey or featureId is required. 
 * @param metadata Additional metadata for the feature. 
 * @param isSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true. 
 * @param isUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future. 
 * @param measureUsageFrom 
 * @param issueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount. That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.  Manually creating such a grant would mean having the \"amount\", \"minRolloverAmount\", and \"maxRolloverAmount\" fields all be the same. 
 * @param issueAfterResetPriority Defines the grant priority for the default grant. If provided, issueAfterReset must have a value. 
 * @param preserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is forgiven. 
 */
@Serializable

data class EntitlementMeteredCreateInputs (

    @SerialName(value = "usagePeriod") @Required val usagePeriod: RecurringPeriodCreateInput,

    @SerialName(value = "type") @Required val type: EntitlementMeteredCreateInputs.Type,

    /* The feature the subject is entitled to use. Either featureKey or featureId is required.  */
    @SerialName(value = "featureKey") val featureKey: kotlin.String? = null,

    /* The feature the subject is entitled to use. Either featureKey or featureId is required.  */
    @SerialName(value = "featureId") val featureId: kotlin.String? = null,

    /* Additional metadata for the feature.  */
    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.  */
    @SerialName(value = "isSoftLimit") val isSoftLimit: kotlin.Boolean? = false,

    /* Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.  */
    @SerialName(value = "isUnlimited") val isUnlimited: kotlin.Boolean? = false,

    @SerialName(value = "measureUsageFrom") val measureUsageFrom: MeasureUsageFromEnum? = null,

    /* You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount. That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.  Manually creating such a grant would mean having the \"amount\", \"minRolloverAmount\", and \"maxRolloverAmount\" fields all be the same.  */
    @SerialName(value = "issueAfterReset") val issueAfterReset: kotlin.Double? = null,

    /* Defines the grant priority for the default grant. If provided, issueAfterReset must have a value.  */
    @SerialName(value = "issueAfterResetPriority") val issueAfterResetPriority: kotlin.Int? = 1,

    /* If true, the overage is preserved at reset. If false, the usage is forgiven.  */
    @SerialName(value = "preserveOverageAtReset") val preserveOverageAtReset: kotlin.Boolean? = false

) {

    /**
     * 
     *
     * Values: metered
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "metered") metered("metered");
    }

}

