/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import xyz.hisname.openmeter.models.EntitlementBoolean
import xyz.hisname.openmeter.models.EntitlementMetered
import xyz.hisname.openmeter.models.EntitlementStatic
import xyz.hisname.openmeter.models.Period
import xyz.hisname.openmeter.models.RecurringPeriod

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param featureKey The feature the subject is entitled to use. Either featureKey or featureId is required. 
 * @param featureId The feature the subject is entitled to use. Either featureKey or featureId is required. 
 * @param usagePeriod 
 * @param type 
 * @param measureUsageFrom The time from which usage is measured. If not specified on creation, defaults to the entitlement creation time. 
 * @param lastReset The last time a reset happened. 
 * @param currentUsagePeriod 
 * @param id Readonly unique ULID identifier. 
 * @param createdAt The date and time the resource was created.
 * @param updatedAt The date and time the resource was last updated. The initial value is the same as createdAt.
 * @param subjectKey The identifier key unique to the subject
 * @param config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object. 
 * @param metadata Additional metadata for the feature. 
 * @param isSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true. 
 * @param isUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future. 
 * @param issueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount. That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.  Manually creating such a grant would mean having the \"amount\", \"minRolloverAmount\", and \"maxRolloverAmount\" fields all be the same. 
 * @param issueAfterResetPriority Defines the grant priority for the default grant. If provided, issueAfterReset must have a value. 
 * @param preserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is forgiven. 
 * @param deletedAt The date and time the resource was deleted.
 */
@Serializable

sealed interface Entitlement {

    /* The feature the subject is entitled to use. Either featureKey or featureId is required.  */
    @SerialName(value = "featureKey") @Required val featureKey: kotlin.String
    /* The feature the subject is entitled to use. Either featureKey or featureId is required.  */
    @SerialName(value = "featureId") @Required val featureId: kotlin.String
    @SerialName(value = "usagePeriod") @Required val usagePeriod: RecurringPeriod
    @SerialName(value = "type") @Required val type: Entitlement.Type
    /* The time from which usage is measured. If not specified on creation, defaults to the entitlement creation time.  */
    @SerialName(value = "measureUsageFrom") @Required val measureUsageFrom: kotlinx.datetime.Instant
    /* The last time a reset happened.  */
    @SerialName(value = "lastReset") @Required val lastReset: kotlinx.datetime.Instant
    @SerialName(value = "currentUsagePeriod") @Required val currentUsagePeriod: Period
    /* Readonly unique ULID identifier.  */
    @SerialName(value = "id") @Required val id: kotlin.String
    /* The date and time the resource was created. */
    @SerialName(value = "createdAt") @Required val createdAt: kotlinx.datetime.Instant
    /* The date and time the resource was last updated. The initial value is the same as createdAt. */
    @SerialName(value = "updatedAt") @Required val updatedAt: kotlinx.datetime.Instant
    /* The identifier key unique to the subject */
    @SerialName(value = "subjectKey") @Required val subjectKey: kotlin.String
    /* The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.  */
    @SerialName(value = "config") @Required val config: kotlin.String
    /* Additional metadata for the feature.  */
    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>?
    /* If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.  */
    @SerialName(value = "isSoftLimit") val isSoftLimit: kotlin.Boolean?
    /* Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.  */
    @SerialName(value = "isUnlimited") val isUnlimited: kotlin.Boolean?
    /* You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount. That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.  Manually creating such a grant would mean having the \"amount\", \"minRolloverAmount\", and \"maxRolloverAmount\" fields all be the same.  */
    @SerialName(value = "issueAfterReset") val issueAfterReset: kotlin.Double?
    /* Defines the grant priority for the default grant. If provided, issueAfterReset must have a value.  */
    @SerialName(value = "issueAfterResetPriority") val issueAfterResetPriority: kotlin.Int?
    /* If true, the overage is preserved at reset. If false, the usage is forgiven.  */
    @SerialName(value = "preserveOverageAtReset") val preserveOverageAtReset: kotlin.Boolean?
    /* The date and time the resource was deleted. */
    @SerialName(value = "deletedAt") val deletedAt: kotlinx.datetime.Instant?
    /**
     * 
     *
     * Values: metered,static,boolean
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "metered") metered("metered"),
        @SerialName(value = "static") static("static"),
        @SerialName(value = "boolean") boolean("boolean");
    }

}

