/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import xyz.hisname.openmeter.models.ExpirationPeriod
import xyz.hisname.openmeter.models.RecurringPeriodCreateInput

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * Grants are used to increase balance of specific subjects. 
 *
 * @param amount The amount to grant. Should be a positive number. 
 * @param effectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute). 
 * @param expiration 
 * @param priority The priority of the grant. Grants with higher priority are applied first. Priority is a positive decimal numbers. With lower numbers indicating higher importance. For example, a priority of 1 is more urgent than a priority of 2. When there are several grants available for the same subject, the system selects the grant with the highest priority. In cases where grants share the same priority level, the grant closest to its expiration will be used first. In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first. 
 * @param maxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount)) 
 * @param minRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount)) 
 * @param metadata 
 * @param recurrence 
 */
@Serializable

data class EntitlementGrantCreateInput (

    /* The amount to grant. Should be a positive number.  */
    @SerialName(value = "amount") @Required val amount: kotlin.Double,

    /* Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).  */
    @SerialName(value = "effectiveAt") @Required val effectiveAt: kotlinx.datetime.Instant,

    @SerialName(value = "expiration") @Required val expiration: ExpirationPeriod,

    /* The priority of the grant. Grants with higher priority are applied first. Priority is a positive decimal numbers. With lower numbers indicating higher importance. For example, a priority of 1 is more urgent than a priority of 2. When there are several grants available for the same subject, the system selects the grant with the highest priority. In cases where grants share the same priority level, the grant closest to its expiration will be used first. In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.  */
    @SerialName(value = "priority") val priority: kotlin.Int? = 1,

    /* Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))  */
    @SerialName(value = "maxRolloverAmount") val maxRolloverAmount: kotlin.Double? = 0.0,

    /* Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))  */
    @SerialName(value = "minRolloverAmount") val minRolloverAmount: kotlin.Double? = 0.0,

    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    @SerialName(value = "recurrence") val recurrence: RecurringPeriodCreateInput? = null

) {


}

