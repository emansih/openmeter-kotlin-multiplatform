/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.apis

import xyz.hisname.openmeter.models.Event
import xyz.hisname.openmeter.models.IngestedEvent
import xyz.hisname.openmeter.models.Problem

import xyz.hisname.openmeter.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class EventsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Ingest events
     * Ingests an event or batch of events following the CloudEvents specification. 
     * @param event The event or batch of events to ingest. The request body must be a CloudEvents JSON object or an array of CloudEvents JSON objects. The CloudEvents JSON object must adhere to the CloudEvents Specification JSON Schema. 
     * @return void
     */
    open suspend fun ingestEvents(event: Event): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = event

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * List ingested events
     * List ingested events within a time range. 
     * @param from Start date-time in RFC 3339 format. Inclusive.  (optional)
     * @param to End date-time in RFC 3339 format. Inclusive.  (optional)
     * @param limit Number of events to return (optional, default to 100)
     * @return kotlin.collections.List<IngestedEvent>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listEvents(from: kotlinx.datetime.Instant? = null, to: kotlinx.datetime.Instant? = null, limit: kotlin.Int? = 100): HttpResponse<kotlin.collections.List<IngestedEvent>> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        from?.apply { localVariableQuery["from"] = listOf("$from") }
        to?.apply { localVariableQuery["to"] = listOf("$to") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/events",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListEventsResponse>().map { value }
    }

    @Serializable(ListEventsResponse.Companion::class)
    private class ListEventsResponse(val value: List<IngestedEvent>) {
        companion object : KSerializer<ListEventsResponse> {
            private val serializer: KSerializer<List<IngestedEvent>> = serializer<List<IngestedEvent>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ListEventsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ListEventsResponse(serializer.deserialize(decoder))
        }
    }

}
