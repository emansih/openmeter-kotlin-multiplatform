/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.apis

import xyz.hisname.openmeter.models.InvalidatePortalTokensRequest
import xyz.hisname.openmeter.models.MeterQueryResult
import xyz.hisname.openmeter.models.PortalToken
import xyz.hisname.openmeter.models.Problem
import xyz.hisname.openmeter.models.WindowSize

import xyz.hisname.openmeter.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class PortalApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create portal token
     * Create a consumer portal token.
     * @param portalToken The portal token to create.
     * @return PortalToken
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createPortalToken(portalToken: PortalToken): HttpResponse<PortalToken> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = portalToken

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/portal/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * ☁ Invalidate portal tokens
     * *Available in OpenMeter Cloud.*  Invalidates consumer portal tokens by ID or subject. 
     * @param invalidatePortalTokensRequest If no id or subject is specified, all tokens will be invalidated.
     * @return void
     */
    open suspend fun invalidatePortalTokens(invalidatePortalTokensRequest: InvalidatePortalTokensRequest): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = invalidatePortalTokensRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/portal/tokens/invalidate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * ☁ List portal tokens
     * *Available in OpenMeter Cloud.*  List consumer portal tokens. 
     * @param limit Number of portal tokens to return. Default is 25. (optional, default to 25)
     * @return kotlin.collections.List<PortalToken>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listPortalTokens(limit: kotlin.Int? = 25): HttpResponse<kotlin.collections.List<PortalToken>> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/portal/tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListPortalTokensResponse>().map { value }
    }

    @Serializable(ListPortalTokensResponse.Companion::class)
    private class ListPortalTokensResponse(val value: List<PortalToken>) {
        companion object : KSerializer<ListPortalTokensResponse> {
            private val serializer: KSerializer<List<PortalToken>> = serializer<List<PortalToken>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ListPortalTokensResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ListPortalTokensResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Query portal meter
     * Query meter for consumer portal. This endpoint is publicly exposable to consumers.
     * @param meterSlug A unique identifier for the meter.
     * @param from Start date-time in RFC 3339 format. Inclusive.  (optional)
     * @param to End date-time in RFC 3339 format. Inclusive.  (optional)
     * @param windowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.  (optional)
     * @param windowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones). If not specified, the UTC timezone will be used.  (optional, default to "UTC")
     * @param filterGroupBy  (optional)
     * @param groupBy If not specified a single aggregate will be returned for each subject and time window. &#x60;subject&#x60; is a reserved group by value.  (optional)
     * @return MeterQueryResult
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun queryPortalMeter(meterSlug: kotlin.String, from: kotlinx.datetime.Instant? = null, to: kotlinx.datetime.Instant? = null, windowSize: WindowSize? = null, windowTimeZone: kotlin.String? = "UTC", filterGroupBy: kotlin.collections.Map<kotlin.String, kotlin.String>? = null, groupBy: kotlin.collections.List<kotlin.String>? = null): HttpResponse<MeterQueryResult> {

        val localVariableAuthNames = listOf<String>("CloudPortalTokenAuth", "PortalTokenAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        from?.apply { localVariableQuery["from"] = listOf("$from") }
        to?.apply { localVariableQuery["to"] = listOf("$to") }
        windowSize?.apply { localVariableQuery["windowSize"] = listOf("$windowSize") }
        windowTimeZone?.apply { localVariableQuery["windowTimeZone"] = listOf("$windowTimeZone") }
        filterGroupBy?.apply {
            localVariableQuery["filterGroupBy"] = toMultiValue(
                this.map { "${it.key}:${it.value}" },
                ""
            )
        }
        groupBy?.apply { localVariableQuery["groupBy"] = toMultiValue(this, "multi") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/portal/meters/{meterSlug}/query".replace("{" + "meterSlug" + "}", "$meterSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
