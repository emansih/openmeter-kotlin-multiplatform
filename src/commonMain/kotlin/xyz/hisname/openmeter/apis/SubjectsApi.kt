/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.apis

import xyz.hisname.openmeter.models.Problem
import xyz.hisname.openmeter.models.Subject

import xyz.hisname.openmeter.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class SubjectsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * ☁ Delete subject
     * *Available in OpenMeter Cloud.*  Delete a subject by ID or key. 
     * @param subjectIdOrKey A unique identifier for a subject.
     * @return void
     */
    open suspend fun deleteSubject(subjectIdOrKey: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v1/subjects/{subjectIdOrKey}".replace("{" + "subjectIdOrKey" + "}", "$subjectIdOrKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ☁ Get subject
     * *Available in OpenMeter Cloud.*  Get subject by ID or key. 
     * @param subjectIdOrKey A unique identifier for a subject.
     * @return Subject
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getSubject(subjectIdOrKey: kotlin.String): HttpResponse<Subject> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/subjects/{subjectIdOrKey}".replace("{" + "subjectIdOrKey" + "}", "$subjectIdOrKey"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * ☁ List subjects
     * *Available in OpenMeter Cloud.*  List subjects. 
     * @return kotlin.collections.List<Subject>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun listSubjects(): HttpResponse<kotlin.collections.List<Subject>> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v1/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ListSubjectsResponse>().map { value }
    }

    @Serializable(ListSubjectsResponse.Companion::class)
    private class ListSubjectsResponse(val value: List<Subject>) {
        companion object : KSerializer<ListSubjectsResponse> {
            private val serializer: KSerializer<List<Subject>> = serializer<List<Subject>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ListSubjectsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ListSubjectsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * ☁ Upsert subject
     * *Available in OpenMeter Cloud.*  Upserts a subject. Creates or updates subject. If the subject doesn&#39;t exist, it will be created. If the subject exists, it will be partially updated with the provided fields. 
     * @param subject The subject to upsert.
     * @return kotlin.collections.List<Subject>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun upsertSubject(subject: kotlin.collections.List<Subject>): HttpResponse<kotlin.collections.List<Subject>> {

        val localVariableAuthNames = listOf<String>("CloudCookieAuth", "CloudTokenAuth")

        val localVariableBody = UpsertSubjectRequest(subject)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v1/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UpsertSubjectResponse>().map { value }
    }

    @Serializable(UpsertSubjectRequest.Companion::class)
    private class UpsertSubjectRequest(val value: List<Subject>) {
        companion object : KSerializer<UpsertSubjectRequest> {
            private val serializer: KSerializer<List<Subject>> = serializer<List<Subject>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UpsertSubjectRequest) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UpsertSubjectRequest(serializer.deserialize(decoder))
        }
    }
    @Serializable(UpsertSubjectResponse.Companion::class)
    private class UpsertSubjectResponse(val value: List<Subject>) {
        companion object : KSerializer<UpsertSubjectResponse> {
            private val serializer: KSerializer<List<Subject>> = serializer<List<Subject>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: UpsertSubjectResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = UpsertSubjectResponse(serializer.deserialize(decoder))
        }
    }

}
