/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.models.EntitlementMetered
import xyz.hisname.openmeter.models.Period
import xyz.hisname.openmeter.models.RecurringPeriod

class EntitlementMeteredTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of EntitlementMetered
        //val modelInstance = EntitlementMetered()

        // to test the property `featureKey` - The feature the subject is entitled to use. Either featureKey or featureId is required. 
        should("test featureKey") {
            // uncomment below to test the property
            //modelInstance.featureKey shouldBe ("TODO")
        }

        // to test the property `featureId` - The feature the subject is entitled to use. Either featureKey or featureId is required. 
        should("test featureId") {
            // uncomment below to test the property
            //modelInstance.featureId shouldBe ("TODO")
        }

        // to test the property `usagePeriod`
        should("test usagePeriod") {
            // uncomment below to test the property
            //modelInstance.usagePeriod shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `measureUsageFrom` - The time from which usage is measured. If not specified on creation, defaults to the entitlement creation time. 
        should("test measureUsageFrom") {
            // uncomment below to test the property
            //modelInstance.measureUsageFrom shouldBe ("TODO")
        }

        // to test the property `lastReset` - The last time a reset happened. 
        should("test lastReset") {
            // uncomment below to test the property
            //modelInstance.lastReset shouldBe ("TODO")
        }

        // to test the property `currentUsagePeriod`
        should("test currentUsagePeriod") {
            // uncomment below to test the property
            //modelInstance.currentUsagePeriod shouldBe ("TODO")
        }

        // to test the property `id` - Readonly unique ULID identifier. 
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `createdAt` - The date and time the resource was created.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `updatedAt` - The date and time the resource was last updated. The initial value is the same as createdAt.
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `subjectKey` - The identifier key unique to the subject
        should("test subjectKey") {
            // uncomment below to test the property
            //modelInstance.subjectKey shouldBe ("TODO")
        }

        // to test the property `metadata` - Additional metadata for the feature. 
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `isSoftLimit` - If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true. 
        should("test isSoftLimit") {
            // uncomment below to test the property
            //modelInstance.isSoftLimit shouldBe ("TODO")
        }

        // to test the property `isUnlimited` - Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future. 
        should("test isUnlimited") {
            // uncomment below to test the property
            //modelInstance.isUnlimited shouldBe ("TODO")
        }

        // to test the property `issueAfterReset` - You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance. If an amount is specified here, a grant will be created alongside the entitlement with the specified amount. That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.  Manually creating such a grant would mean having the \"amount\", \"minRolloverAmount\", and \"maxRolloverAmount\" fields all be the same. 
        should("test issueAfterReset") {
            // uncomment below to test the property
            //modelInstance.issueAfterReset shouldBe ("TODO")
        }

        // to test the property `issueAfterResetPriority` - Defines the grant priority for the default grant. If provided, issueAfterReset must have a value. 
        should("test issueAfterResetPriority") {
            // uncomment below to test the property
            //modelInstance.issueAfterResetPriority shouldBe ("TODO")
        }

        // to test the property `preserveOverageAtReset` - If true, the overage is preserved at reset. If false, the usage is forgiven. 
        should("test preserveOverageAtReset") {
            // uncomment below to test the property
            //modelInstance.preserveOverageAtReset shouldBe ("TODO")
        }

        // to test the property `deletedAt` - The date and time the resource was deleted.
        should("test deletedAt") {
            // uncomment below to test the property
            //modelInstance.deletedAt shouldBe ("TODO")
        }

    }
}
