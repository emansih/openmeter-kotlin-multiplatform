/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.models.EntitlementGrant
import xyz.hisname.openmeter.models.ExpirationPeriod
import xyz.hisname.openmeter.models.RecurringPeriod

class EntitlementGrantTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of EntitlementGrant
        //val modelInstance = EntitlementGrant()

        // to test the property `amount` - The amount to grant. Should be a positive number. 
        should("test amount") {
            // uncomment below to test the property
            //modelInstance.amount shouldBe ("TODO")
        }

        // to test the property `effectiveAt` - Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute). 
        should("test effectiveAt") {
            // uncomment below to test the property
            //modelInstance.effectiveAt shouldBe ("TODO")
        }

        // to test the property `expiration`
        should("test expiration") {
            // uncomment below to test the property
            //modelInstance.expiration shouldBe ("TODO")
        }

        // to test the property `id` - Readonly unique ULID identifier. 
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `createdAt` - The date and time the resource was created.
        should("test createdAt") {
            // uncomment below to test the property
            //modelInstance.createdAt shouldBe ("TODO")
        }

        // to test the property `updatedAt` - The date and time the resource was last updated. The initial value is the same as createdAt.
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `entitlementId` - The unique entitlement ULID that the grant is associated with. 
        should("test entitlementId") {
            // uncomment below to test the property
            //modelInstance.entitlementId shouldBe ("TODO")
        }

        // to test the property `priority` - The priority of the grant. Grants with higher priority are applied first. Priority is a positive decimal numbers. With lower numbers indicating higher importance. For example, a priority of 1 is more urgent than a priority of 2. When there are several grants available for the same subject, the system selects the grant with the highest priority. In cases where grants share the same priority level, the grant closest to its expiration will be used first. In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first. 
        should("test priority") {
            // uncomment below to test the property
            //modelInstance.priority shouldBe ("TODO")
        }

        // to test the property `maxRolloverAmount` - Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount)) 
        should("test maxRolloverAmount") {
            // uncomment below to test the property
            //modelInstance.maxRolloverAmount shouldBe ("TODO")
        }

        // to test the property `minRolloverAmount` - Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.  Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount)) 
        should("test minRolloverAmount") {
            // uncomment below to test the property
            //modelInstance.minRolloverAmount shouldBe ("TODO")
        }

        // to test the property `metadata`
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `recurrence`
        should("test recurrence") {
            // uncomment below to test the property
            //modelInstance.recurrence shouldBe ("TODO")
        }

        // to test the property `deletedAt` - The date and time the resource was deleted.
        should("test deletedAt") {
            // uncomment below to test the property
            //modelInstance.deletedAt shouldBe ("TODO")
        }

        // to test the property `nextRecurrence` - The next time the grant will recurr. 
        should("test nextRecurrence") {
            // uncomment below to test the property
            //modelInstance.nextRecurrence shouldBe ("TODO")
        }

        // to test the property `expiresAt` - The expiration date of the grant. 
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `voidedAt` - The date and time the grant was voided (cannot be used after that).
        should("test voidedAt") {
            // uncomment below to test the property
            //modelInstance.voidedAt shouldBe ("TODO")
        }

    }
}
