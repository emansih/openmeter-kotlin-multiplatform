/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.models.FeatureCreateInputs

class FeatureCreateInputsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of FeatureCreateInputs
        //val modelInstance = FeatureCreateInputs()

        // to test the property `key` - The key is an immutable unique identifier of the feature used throughout the API, for example when interacting with a subject's entitlements. The key has to be unique across all active features, but archived features can share the same key. The key should consist of lowercase alphanumeric characters and dashes. 
        should("test key") {
            // uncomment below to test the property
            //modelInstance.key shouldBe ("TODO")
        }

        // to test the property `name` - The name of the feature. 
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `metadata` - Additional metadata for the feature, useful for syncing with external systems and annotating custom fields. 
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `meterSlug` - The meter that the feature is associated with and and based on which usage is calculated. The meter selected must have SUM or COUNT aggregation. 
        should("test meterSlug") {
            // uncomment below to test the property
            //modelInstance.meterSlug shouldBe ("TODO")
        }

        // to test the property `meterGroupByFilters` - Optional meter group by filters. Useful if the meter scope is broader than what feature tracks. Example scenario would be a meter tracking all token use with groupBy fields for the model, then the feature could filter for model=gpt-4. 
        should("test meterGroupByFilters") {
            // uncomment below to test the property
            //modelInstance.meterGroupByFilters shouldBe ("TODO")
        }

    }
}
