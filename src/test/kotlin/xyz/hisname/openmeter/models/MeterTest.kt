/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.models.Meter
import xyz.hisname.openmeter.models.MeterAggregation
import xyz.hisname.openmeter.models.WindowSize

class MeterTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Meter
        //val modelInstance = Meter()

        // to test the property `slug` - A unique, human-readable identifier for the meter. Must consist only alphanumeric and underscore characters.
        should("test slug") {
            // uncomment below to test the property
            //modelInstance.slug shouldBe ("TODO")
        }

        // to test the property `aggregation`
        should("test aggregation") {
            // uncomment below to test the property
            //modelInstance.aggregation shouldBe ("TODO")
        }

        // to test the property `windowSize`
        should("test windowSize") {
            // uncomment below to test the property
            //modelInstance.windowSize shouldBe ("TODO")
        }

        // to test the property `eventType` - The event type to aggregate.
        should("test eventType") {
            // uncomment below to test the property
            //modelInstance.eventType shouldBe ("TODO")
        }

        // to test the property `id` - A unique identifier for the meter.
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `description` - A description of the meter.
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `valueProperty` - JSONPath expression to extract the value from the ingested event's data property. The ingested value for SUM, AVG, MIN, and MAX aggregations is a number or a string that can be parsed to a number. For UNIQUE_COUNT aggregation, the ingested value must be a string. For COUNT aggregation the valueProperty is ignored. 
        should("test valueProperty") {
            // uncomment below to test the property
            //modelInstance.valueProperty shouldBe ("TODO")
        }

        // to test the property `groupBy` - Named JSONPath expressions to extract the group by values from the event data. Keys must be unique and consist only alphanumeric and underscore characters.
        should("test groupBy") {
            // uncomment below to test the property
            //modelInstance.groupBy shouldBe ("TODO")
        }

    }
}
