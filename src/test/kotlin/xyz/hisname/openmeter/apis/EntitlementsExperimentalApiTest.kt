/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.apis.EntitlementsExperimentalApi
import xyz.hisname.openmeter.models.ConflictProblem
import xyz.hisname.openmeter.models.Entitlement
import xyz.hisname.openmeter.models.EntitlementCreateInputs
import xyz.hisname.openmeter.models.EntitlementGrant
import xyz.hisname.openmeter.models.EntitlementGrantCreateInput
import xyz.hisname.openmeter.models.EntitlementValue
import xyz.hisname.openmeter.models.Feature
import xyz.hisname.openmeter.models.FeatureCreateInputs
import xyz.hisname.openmeter.models.GetEntitlementById200Response
import xyz.hisname.openmeter.models.ListEntitlementGrantResponse
import xyz.hisname.openmeter.models.ListEntitlementResponse
import xyz.hisname.openmeter.models.ListFeatureResponse
import xyz.hisname.openmeter.models.Problem
import xyz.hisname.openmeter.models.ResetEntitlementUsageRequest
import xyz.hisname.openmeter.models.WindowedBalanceHistory

class EntitlementsExperimentalApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of EntitlementsExperimentalApi
        //val apiInstance = EntitlementsExperimentalApi()

        // to test createEntitlement
        should("test createEntitlement") {
            // uncomment below to test createEntitlement
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementCreateInputs : EntitlementCreateInputs =  // EntitlementCreateInputs | The entitlement to create.
            //val result : Entitlement = apiInstance.createEntitlement(subjectIdOrKey, entitlementCreateInputs)
            //result shouldBe ("TODO")
        }

        // to test createFeature
        should("test createFeature") {
            // uncomment below to test createFeature
            //val featureCreateInputs : FeatureCreateInputs =  // FeatureCreateInputs | The feature to create.
            //val result : Feature = apiInstance.createFeature(featureCreateInputs)
            //result shouldBe ("TODO")
        }

        // to test createGrant
        should("test createGrant") {
            // uncomment below to test createGrant
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementIdOrFeatureKey : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV or gpt4_tokens // kotlin.String | The id of the entitlement or the key of the feature.
            //val entitlementGrantCreateInput : EntitlementGrantCreateInput =  // EntitlementGrantCreateInput | The grant to create.
            //val result : EntitlementGrant = apiInstance.createGrant(subjectIdOrKey, entitlementIdOrFeatureKey, entitlementGrantCreateInput)
            //result shouldBe ("TODO")
        }

        // to test deleteEntitlement
        should("test deleteEntitlement") {
            // uncomment below to test deleteEntitlement
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID for an entitlement.
            //apiInstance.deleteEntitlement(subjectIdOrKey, entitlementId)
        }

        // to test deleteFeature
        should("test deleteFeature") {
            // uncomment below to test deleteFeature
            //val featureId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID identifier for a feature.
            //apiInstance.deleteFeature(featureId)
        }

        // to test getEntitlement
        should("test getEntitlement") {
            // uncomment below to test getEntitlement
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID for an entitlement.
            //val result : GetEntitlementById200Response = apiInstance.getEntitlement(subjectIdOrKey, entitlementId)
            //result shouldBe ("TODO")
        }

        // to test getEntitlementById
        should("test getEntitlementById") {
            // uncomment below to test getEntitlementById
            //val entitlementId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID for an entitlement.
            //val result : GetEntitlementById200Response = apiInstance.getEntitlementById(entitlementId)
            //result shouldBe ("TODO")
        }

        // to test getEntitlementHistory
        should("test getEntitlementHistory") {
            // uncomment below to test getEntitlementHistory
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID for an entitlement.
            //val windowSize : kotlin.String = windowSize_example // kotlin.String | Size of the time window to group the history by. Cannot be shorter than meter granularity. 
            //val from : kotlinx.datetime.Instant = 2023-01-01T00:00Z // kotlinx.datetime.Instant | Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to the last reset. Gets truncated to the granularity of the underlying meter. 
            //val to : kotlinx.datetime.Instant = 2023-01-01T00:00Z // kotlinx.datetime.Instant | End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now. If not now then gets truncated to the granularity of the underlying meter. 
            //val windowTimeZone : kotlin.String = America/New_York // kotlin.String | The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones). If not specified, the UTC timezone will be used. 
            //val result : WindowedBalanceHistory = apiInstance.getEntitlementHistory(subjectIdOrKey, entitlementId, windowSize, from, to, windowTimeZone)
            //result shouldBe ("TODO")
        }

        // to test getEntitlementValue
        should("test getEntitlementValue") {
            // uncomment below to test getEntitlementValue
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementIdOrFeatureKey : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV or gpt4_tokens // kotlin.String | The id of the entitlement or the key of the feature.
            //val time : kotlinx.datetime.Instant = 2023-01-01T00:00Z // kotlinx.datetime.Instant | Point of time to check value: date-time in RFC 3339 format. Defaults to now. 
            //val result : EntitlementValue = apiInstance.getEntitlementValue(subjectIdOrKey, entitlementIdOrFeatureKey, time)
            //result shouldBe ("TODO")
        }

        // to test getFeature
        should("test getFeature") {
            // uncomment below to test getFeature
            //val featureId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID identifier for a feature.
            //val result : Feature = apiInstance.getFeature(featureId)
            //result shouldBe ("TODO")
        }

        // to test listEntitlementGrants
        should("test listEntitlementGrants") {
            // uncomment below to test listEntitlementGrants
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementIdOrFeatureKey : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV or gpt4_tokens // kotlin.String | The id of the entitlement or the key of the feature.
            //val includeDeleted : kotlin.Boolean = true // kotlin.Boolean | Include deleted entries.
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | Order by field
            //val result : kotlin.collections.List<EntitlementGrant> = apiInstance.listEntitlementGrants(subjectIdOrKey, entitlementIdOrFeatureKey, includeDeleted, orderBy)
            //result shouldBe ("TODO")
        }

        // to test listEntitlements
        should("test listEntitlements") {
            // uncomment below to test listEntitlements
            //val page : kotlin.Int = 1 // kotlin.Int | Page number to return
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Number of entries to return per page
            //val limit : kotlin.Int = 100 // kotlin.Int | Number of entries to return
            //val offset : kotlin.Int = 0 // kotlin.Int | Number of entries to skip
            //val subject : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple subjects.  Usage: `?subject=customer-1&subject=customer-2` 
            //val feature : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple features.  Usage: `?feature=feature-1&feature=feature-2` 
            //val entitlementType : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple entitlement types.  Usage: `?entitlementType=metered&entitlementType=static` 
            //val order : kotlin.String = order_example // kotlin.String | Order by field.  Usage: `?order=ASC` 
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | Order by field
            //val result : ListEntitlementResponse = apiInstance.listEntitlements(page, pageSize, limit, offset, subject, feature, entitlementType, order, orderBy)
            //result shouldBe ("TODO")
        }

        // to test listFeatures
        should("test listFeatures") {
            // uncomment below to test listFeatures
            //val page : kotlin.Int = 1 // kotlin.Int | Page number to return
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Number of entries to return per page
            //val limit : kotlin.Int = 100 // kotlin.Int | Number of entries to return
            //val offset : kotlin.Int = 0 // kotlin.Int | Number of entries to skip
            //val meterSlug : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple meterSlug.  Usage: `?meterSlug=meter-1&meterSlug=meter-2` 
            //val order : kotlin.String = order_example // kotlin.String | Order by field.  Usage: `?order=ASC` 
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | Order by field
            //val includeArchived : kotlin.Boolean = true // kotlin.Boolean | Include archived features.
            //val result : ListFeatureResponse = apiInstance.listFeatures(page, pageSize, limit, offset, meterSlug, order, orderBy, includeArchived)
            //result shouldBe ("TODO")
        }

        // to test listGrants
        should("test listGrants") {
            // uncomment below to test listGrants
            //val page : kotlin.Int = 1 // kotlin.Int | Page number to return
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Number of entries to return per page
            //val limit : kotlin.Int = 100 // kotlin.Int | Number of entries to return
            //val offset : kotlin.Int = 0 // kotlin.Int | Number of entries to skip
            //val subject : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple subjects.  Usage: `?subject=customer-1&subject=customer-2` 
            //val feature : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple features.  Usage: `?feature=feature-1&feature=feature-2` 
            //val order : kotlin.String = order_example // kotlin.String | Order by field.  Usage: `?order=ASC` 
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | Order by field
            //val includeDeleted : kotlin.Boolean = true // kotlin.Boolean | Include deleted entries.
            //val result : ListEntitlementGrantResponse = apiInstance.listGrants(page, pageSize, limit, offset, subject, feature, order, orderBy, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test listSubjectEntitlements
        should("test listSubjectEntitlements") {
            // uncomment below to test listSubjectEntitlements
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val includeDeleted : kotlin.Boolean = true // kotlin.Boolean | Include deleted entries.
            //val result : kotlin.collections.List<Entitlement> = apiInstance.listSubjectEntitlements(subjectIdOrKey, includeDeleted)
            //result shouldBe ("TODO")
        }

        // to test overrideEntitlement
        should("test overrideEntitlement") {
            // uncomment below to test overrideEntitlement
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementIdOrFeatureKey : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV or gpt4_tokens // kotlin.String | The id of the entitlement or the key of the feature.
            //val entitlementCreateInputs : EntitlementCreateInputs =  // EntitlementCreateInputs | The entitlement to create.
            //val result : Entitlement = apiInstance.overrideEntitlement(subjectIdOrKey, entitlementIdOrFeatureKey, entitlementCreateInputs)
            //result shouldBe ("TODO")
        }

        // to test resetEntitlementUsage
        should("test resetEntitlementUsage") {
            // uncomment below to test resetEntitlementUsage
            //val subjectIdOrKey : kotlin.String = customer-id // kotlin.String | A unique identifier for a subject.
            //val entitlementId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique ULID for an entitlement.
            //val resetEntitlementUsageRequest : ResetEntitlementUsageRequest =  // ResetEntitlementUsageRequest | 
            //apiInstance.resetEntitlementUsage(subjectIdOrKey, entitlementId, resetEntitlementUsageRequest)
        }

        // to test voidGrant
        should("test voidGrant") {
            // uncomment below to test voidGrant
            //val grantId : kotlin.String = 01ARZ3NDEKTSV4RRFFQ69G5FAV // kotlin.String | A unique identifier for a grant.
            //apiInstance.voidGrant(grantId)
        }

    }
}
