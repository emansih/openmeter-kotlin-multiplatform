/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.apis.PortalApi
import xyz.hisname.openmeter.models.InvalidatePortalTokensRequest
import xyz.hisname.openmeter.models.MeterQueryResult
import xyz.hisname.openmeter.models.PortalToken
import xyz.hisname.openmeter.models.Problem
import xyz.hisname.openmeter.models.WindowSize

class PortalApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PortalApi
        //val apiInstance = PortalApi()

        // to test createPortalToken
        should("test createPortalToken") {
            // uncomment below to test createPortalToken
            //val portalToken : PortalToken = {"subject":"customer-id","allowedMeterSlugs":["tokens_total"]} // PortalToken | The portal token to create.
            //val result : PortalToken = apiInstance.createPortalToken(portalToken)
            //result shouldBe ("TODO")
        }

        // to test invalidatePortalTokens
        should("test invalidatePortalTokens") {
            // uncomment below to test invalidatePortalTokens
            //val invalidatePortalTokensRequest : InvalidatePortalTokensRequest = {"id":"01G65Z755AFWAKHE12NY0CQ9FH"} // InvalidatePortalTokensRequest | If no id or subject is specified, all tokens will be invalidated.
            //apiInstance.invalidatePortalTokens(invalidatePortalTokensRequest)
        }

        // to test listPortalTokens
        should("test listPortalTokens") {
            // uncomment below to test listPortalTokens
            //val limit : kotlin.Int = 25 // kotlin.Int | Number of portal tokens to return. Default is 25.
            //val result : kotlin.collections.List<PortalToken> = apiInstance.listPortalTokens(limit)
            //result shouldBe ("TODO")
        }

        // to test queryPortalMeter
        should("test queryPortalMeter") {
            // uncomment below to test queryPortalMeter
            //val meterSlug : kotlin.String = tokens_total // kotlin.String | A unique identifier for the meter.
            //val from : kotlinx.datetime.Instant = 2023-01-01T00:00Z // kotlinx.datetime.Instant | Start date-time in RFC 3339 format. Inclusive. 
            //val to : kotlinx.datetime.Instant = 2023-01-02T00:00Z // kotlinx.datetime.Instant | End date-time in RFC 3339 format. Inclusive. 
            //val windowSize : WindowSize =  // WindowSize | If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group. 
            //val windowTimeZone : kotlin.String = America/New_York // kotlin.String | The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones). If not specified, the UTC timezone will be used. 
            //val filterGroupBy : kotlin.collections.Map<kotlin.String, kotlin.String> = {"model":"gpt-4","type":"input"} // kotlin.collections.Map<kotlin.String, kotlin.String> | 
            //val groupBy : kotlin.collections.List<kotlin.String> = ["model","type"] // kotlin.collections.List<kotlin.String> | If not specified a single aggregate will be returned for each subject and time window. `subject` is a reserved group by value. 
            //val result : MeterQueryResult = apiInstance.queryPortalMeter(meterSlug, from, to, windowSize, windowTimeZone, filterGroupBy, groupBy)
            //result shouldBe ("TODO")
        }

    }
}
