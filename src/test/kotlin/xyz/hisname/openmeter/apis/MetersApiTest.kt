/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package xyz.hisname.openmeter.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import xyz.hisname.openmeter.apis.MetersApi
import xyz.hisname.openmeter.models.IdOrSlug
import xyz.hisname.openmeter.models.Meter
import xyz.hisname.openmeter.models.MeterQueryResult
import xyz.hisname.openmeter.models.Problem
import xyz.hisname.openmeter.models.WindowSize

class MetersApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MetersApi
        //val apiInstance = MetersApi()

        // to test createMeter
        should("test createMeter") {
            // uncomment below to test createMeter
            //val meter : Meter =  // Meter | The meter to create.
            //val result : Meter = apiInstance.createMeter(meter)
            //result shouldBe ("TODO")
        }

        // to test deleteMeter
        should("test deleteMeter") {
            // uncomment below to test deleteMeter
            //val meterIdOrSlug : IdOrSlug = meterIdOrSlug_example // IdOrSlug | A unique identifier for the meter.
            //apiInstance.deleteMeter(meterIdOrSlug)
        }

        // to test getMeter
        should("test getMeter") {
            // uncomment below to test getMeter
            //val meterIdOrSlug : IdOrSlug = meterIdOrSlug_example // IdOrSlug | A unique identifier for the meter.
            //val result : Meter = apiInstance.getMeter(meterIdOrSlug)
            //result shouldBe ("TODO")
        }

        // to test listMeterSubjects
        should("test listMeterSubjects") {
            // uncomment below to test listMeterSubjects
            //val meterIdOrSlug : IdOrSlug = meterIdOrSlug_example // IdOrSlug | A unique identifier for the meter.
            //val result : kotlin.collections.List<kotlin.String> = apiInstance.listMeterSubjects(meterIdOrSlug)
            //result shouldBe ("TODO")
        }

        // to test listMeters
        should("test listMeters") {
            // uncomment below to test listMeters
            //val result : kotlin.collections.List<Meter> = apiInstance.listMeters()
            //result shouldBe ("TODO")
        }

        // to test queryMeter
        should("test queryMeter") {
            // uncomment below to test queryMeter
            //val meterIdOrSlug : IdOrSlug = meterIdOrSlug_example // IdOrSlug | A unique identifier for the meter.
            //val from : kotlinx.datetime.Instant = 2023-01-01T00:00Z // kotlinx.datetime.Instant | Start date-time in RFC 3339 format. Inclusive. 
            //val to : kotlinx.datetime.Instant = 2023-01-02T00:00Z // kotlinx.datetime.Instant | End date-time in RFC 3339 format. Inclusive. 
            //val windowSize : WindowSize =  // WindowSize | If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group. 
            //val windowTimeZone : kotlin.String = America/New_York // kotlin.String | The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones). If not specified, the UTC timezone will be used. 
            //val subject : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Filtering by multiple subjects.  Usage: `?subject=customer-1&subject=customer-2` 
            //val filterGroupBy : kotlin.collections.Map<kotlin.String, kotlin.String> = {"model":"gpt-4","type":"input"} // kotlin.collections.Map<kotlin.String, kotlin.String> | 
            //val groupBy : kotlin.collections.List<kotlin.String> = ["model","type"] // kotlin.collections.List<kotlin.String> | If not specified a single aggregate will be returned for each subject and time window. `subject` is a reserved group by value. 
            //val result : MeterQueryResult = apiInstance.queryMeter(meterIdOrSlug, from, to, windowSize, windowTimeZone, subject, filterGroupBy, groupBy)
            //result shouldBe ("TODO")
        }

    }
}
